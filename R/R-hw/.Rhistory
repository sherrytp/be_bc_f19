# 2.10.1
?gold
# Daily morning gold prices in US dollars. 1 January 1985 – 31 March 1989.
?woolyrnq
# Quarterly production of woollen yarn in Australia: tonnes. Mar 1965 – Sep 1994.
?gas
# Australian monthly gas production: 1956–1995.
autoplot(gold)
frequency(gold)
frequency(woolyrnq)
frequency(gas)
which.max(gold)
which.max(gas)
# 2.10.2
# a.
tute1 <- read.csv("/Users/apple/Downloads/tute1.csv", header = TRUE)
# b.
mytimeseries <- ts(tute1[,-1], start = 1981, frequency = 4)
# The [,-1] removes the first column which contains the quarters.
# c.
autoplot(mytimeseries, facets = TRUE)
# 2.10.3
# a.
retaildata <- readxl::read_excel("/Users/apple/Downloads/retail.xlsx", skip = 1)
# b.
myts <- ts(retaildata[, "A3349588R"],
frequency = 12, start = c(1982, 4))
# c.
autoplot(myts)
ggseasonplot(myts)
ggsubseriesplot(myts)
gglagplot(myts)
ggAcf(myts)
# 2.10.4
help(bicoal)
autoplot(bicoal)
help(chicken)
autoplot(ts(chicken))
autoplot(chicken)
autoplot(ts(chicken))
autoplot(chicken)
autoplot(goog)
autoplot(goog) + ylab("Stock Price in Dollars $") + title("Google Stock")
autoplot(goog) + ylab("Stock Price in Dollars $") + ggtitle("Google Stock")
autoplot(writing)
help(a10)
autoplot(h02)
# 2.10.5
ggseasonplot(writing)
ggseasonplot(fancy)
ggseasonplot(a10)
ggseasonplot(h02)
ggsubseriesplot(writing)
ggsubseriesplot(fancy)
ggsubseriesplot(a10)
ggsubseriesplot(h02)
# 2.10.7
autoplot(arrivals)
ggseasonplot(arrivals)
ggsubseriesplot(arrivals)
autoplot(window(elec, start=1980)) +
ggtitle("Australian electricity production") +
xlab("Year") + ylab("GWh")
autoplot(bricksq) +
ggtitle("Australian clay brick production") +
xlab("Year") + ylab("million units")
# 2.10.6
autoplot(hsales)
ggseasonplot(hsales)
ggsubseriesplot(hsales)
gglagplot(hsales)
autoplot(lynx)
autoplot(bricksq)
# Scatterplot
autoplot(elecdemand[,c("Demand","Temperature")], facets=TRUE) +
xlab("Year: 2014") + ylab("") +
ggtitle("Half-hourly electricity demand: Victoria, Australia")
# lag plots and autocorrelation
beer2 <- window(ausbeer, start=1992)
gglagplot(beer2)
ggseasonplot(beer2)
ausbeer
window?
?window
# Clear the workspace
rm(list = ls()) # Clear environment
library(readxl)
SP500 <- read_excel("~/Applications/OneDrive/SP500.xlsx",
sheet = "Equity")
View(SP500)
ts(SP500)
ts(SP500[Date])
ts(SP500['Date'])
goog
ggAcf(gasoline)
acf(gasoline, lag.max = 4)
log(137.86)
log(1776.29)
log(4.65)
date <- as.Date(SP500$Date)
SP500$Date = date
SP500$Date <- date
ts(SP500)
ggAcf(SP500)
SP500 = ts(SP500)
ggAcc
ggAcf(SP500)
View(SP500)
library(readxl)
put_op <- read_excel("~/Applications/OneDrive/put_op.xlsx")
View(put_op)
ts(put_op[1:])
put_acf = ts(put_op[1, ])
View(put_acf)
put_acf = ts(put_op)
put_acf = put_acf.drop("date")
put_acf = put_acf[, 1:]
put_acf = put_acf[, -1]
View(put_acf)
ggAcf(put_acf)
# White Noise
pigs2 <- window(pigs, start=1990)
autoplot(pigs2) +
xlab("Year") + ylab("thousands") +
ggtitle("Number of pigs slaughtered in Victoria")
ggAcf(pigs2)
getwd()
?goog
# Closing stock prices of GOOG from the NASDAQ exchange, for 1000 consecutive trading days between 25 February 2013 and 13 February 2017. Adjusted for splits. goog200 contains the first 200 observations from goog.
?auscafe
mean <- meanf(auscafe, h = 20)
n <- naive(auscafe, h = 20)
sn <- snaive(auscafe)
rwf <- rwf(auscafe, h = 20)
autoplot(mean)
autoplot(n)
autoplot(sn)
autoplot(rwf)
autoplot(n)
autoplot(sn)   # works the best
autoplot(rwf)
autoplot(sn)   # works the best
# author: @lrdegeest
library(tidyverse)
library(cowplot)
library(sandwich)
library(lmtest)
# example utility
example_utility <- function(x) {
u <- (x*(500-5*x))
return(u)
}
# visualize
curve(example_utility, 0, 100)
u <- 20*sqrt(x-p) + 2*tq + hq
# recreate utility function from text
utility <- function(x,p,tq,hq) {
u <- 20*sqrt(x-p) + 2*tq + hq
return(u)
}
curve(utility(x,tq=0,hq=0), from =0, to = 1000)
utility(94,3,3)
curve(utility(x,tq=0,hq=0, p = 0), from =0, to = 1000)
utility(94,3,3)
GW <- function(p,V,c=1) {
return((p*V - c)/p)
}
DC <- function(p,V,S,c=1) {
return(p*(V-S) - c)
}
GW(p = 0.09, 21)
GW(p = 0.76, 10)
DC(p = 0.09, 21)
DC(p = 0.09, 21, 1)
DC(p = 0.76, 10, 1)
# load data (assumes you are in the class directory)
df <- read.csv("be_bc_f19/data/endowment_data.csv")
# load data (assumes you are in the class directory)
df <- read.csv("Desktop/be_bc_f19/data/endowment_data.csv")
getwd()
# load data (assumes you are in the class directory)
df <- read.csv("/User/apple/Desktop/be_bc_f19/data/endowment_data.csv")
# load data (assumes you are in the class directory)
df <- read.csv("/Users/apple/Desktop/be_bc_f19/data/endowment_data.csv")
df$lighter <- factor(df$lighter)
df$magnola_region <- factor(df$magnola_region)
levels(df$magnola_region) <- c("LE", "HE")
# Figure 2
## 2a
fig2a <- df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1) +
theme_classic()
fig2a
## 2b
fig2b <- df %>%
group_by(campname) %>%
filter(campname != "Mizeu") %>%
summarize(sum_trade = sum(trade),mean_trade = mean(trade), distance_to_mangola = unique(distance_to_mangola)) %>%
ggplot(., aes(distance_to_mangola,mean_trade,size=sum_trade,label=campname)) +
geom_point(alpha=0.75,color="tomato") +
geom_text(aes(label=campname),hjust=0, vjust=0,size=3) +
labs(size = "Trades") +
ylim(0,1) +
theme_classic()
fig2b
View(df)
# factor gets the dummy variables of lighters
levels(df$magnola_region)
# factor gets the dummy variables of lighters
levels(df$campname)
fig2a
library(ggplot2)
# Figure 2
## 2a
# 3rd line, ggplot(df) = ggplot(.) means
fig2a <- df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1) +
theme_classic()
# Figure 2
## 2a
# 3rd line, ggplot(df) = ggplot(.) means
fig2a <- df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1) +
theme_classic()
df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1)
df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1)
df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1)
df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1) +
theme_classic()
df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1)
# t-test
t.test(trade~magnola_region, data=df, var.equal=F)
# binomial test
## Null: people trade or don't trade with equal probability
sum_tab <- table(df$magnola_region,df$trade)
d <-c(sum_tab[1], sum_tab[3])
binom.test(d, n = sum(d), p = 1/2)
binom.test(d, n = sum(d), p = 1/2, alternative = "greater")
# Table 1: linear regression
m1 <- lm(trade~magnola_region + distance_to_mangola + lighter + lighter*distance_to_mangola, data=df)
# Table 1: linear regression
m1 <- lm(trade~magnola_region + distance_to_mangola + lighter + lighter*distance_to_mangola, data=df)
summary(m1) # are these the correct standard errors?
# Sandwich packages
# Correcting the wrong assumption that st error is independent; residuals but might be related to people within a group
# cluster robust standard errors: adjust for correlated errors *within* camps (still assumes independence *between* camps)
vcov_campname <- sandwich::vcovCL(m2,cluster = df$campname)  # "::" from this package and you don't have library(pg)
lmtest::coeftest(m2, vcov_campname)
library(sandwich)
install.packages("sandwich")
# Sandwich packages
# Correcting the wrong assumption that st error is independent; residuals but might be related to people within a group
# cluster robust standard errors: adjust for correlated errors *within* camps (still assumes independence *between* camps)
vcov_campname <- sandwich::vcovCL(m2,cluster = df$campname)  # "::" from this package and you don't have library(pg)
lmtest::coeftest(m2, vcov_campname)
# Table 1: linear regression
m1 <- lm(trade~magnola_region + distance_to_mangola + lighter + lighter*distance_to_mangola, data=df)   # IV = lighter*distance_
summary(m1) # are these the correct standard errors?
# Figure 2
## 2a
# 3rd line, ggplot(df) = ggplot(.) means
fig2a <- df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1) +
theme_classic()
fig2a
df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1)
# Figure 2
## 2a
# 3rd line, ggplot(df) = ggplot(.) means
fig2a <- df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1) +
theme_classic()
fig2a
df %>%
group_by(magnola_region) %>%
ggplot(., aes(magnola_region, trade)) +   # aes: axis - avg. trade = proportions
stat_summary(fun.y = mean, geom = "bar", fill="tomato") +    # creates a summary stats of the df by ggploting code
stat_summary(fun.data = mean_se, geom = "errorbar", width=0.1) +
labs(y="Average trade", x="") +
ylim(0,1)
library(readxl)
put_op <- read_excel("~/Applications/OneDrive/put_op.xlsx")
View(put_op)
library(readxl)
call_op <- read_excel("~/Applications/OneDrive/call_op.xlsx")
View(call_op)
library(readxl)
SP500 <- read_excel("~/Applications/OneDrive/SP500.xlsx",
sheet = "Equity")
View(SP500)
library(readxl)
SP500 <- read_excel("~/Applications/OneDrive/SP500.xlsx",
sheet = "Ticker")
View(SP500)
count(SP500$Symbol)
length(SP500$Symbol)
is.na(SP500$Symbol)
colnames(call_op)
colnames(put_op)
colnames(put_op) -> x
View(x)
x <- x[-1,]
x <- x[-1]
View(x)
View(x)
colnames(x) <- c('put', 'equity')
type(x)
x.type
sum(x)
summary(x)
summary(put_op)
x <- data.frame
View(x)
x <- data.frame(put = colnames(put_op), equity = SP500$Symbol)
x <- data.frame(put = c(colnames(put_op), na), equity = SP500$Symbol)
x <- data.frame(put = c(colnames(put_op), 'na'), equity = SP500$Symbol)
View(x)
x <- data.frame(put = colnames(put_op)[-1]), equity = SP500$Symbol)
x <- data.frame(put = colnames(put_op)[-1], equity = SP500$Symbol)
x <- data.frame(put = c(colnames(put_op)[-1], 'na', 'na'), equity = SP500$Symbol)
View(x)
call_op[35]
View(call_op[36])
View(cput_op[36])
View(put_op[36])
is.na(x$put)
"unname" %in% x$put
x <- data.frame(put = c(colnames(put_op)[-1], 'na', 'na'), equity = SP500$Symbol, call = c(colnames(call_op)[-1], 'na', 'na'))
View(x)
# Clear the workspace
rm(list = ls()) # Clear environment
gc()            # Clear unused memory
library(readxl)
call_op <- read_excel("~/Applications/OneDrive/call_op.xlsx")
View(call_op)
library(readxl)
put_op <- read_excel("~/Applications/OneDrive/put_op.xlsx")
View(put_op)
library(readxl)
SP500_Peng_s_MacBook <- read_excel("~/Applications/OneDrive/SP500-Peng's MacBook.xlsx",
sheet = "Equity")
View(SP500_Peng_s_MacBook)
x <- data.frame(put = colnames(put_op), equity = colnames(SP500_Peng_s_MacBook), call = colnames(call_op))
View(x)
sessionInfo()
library(tidyverse)
library(tidyverse)
library(cowplot)
library(sandwich)
library(lmtest)
pwd
setwd("/Users/apple/Desktop/bc_f19_econ/be_bc_f19/R/R-hw")
df <- read_excel("/ps1/sutterexperiment.csv")
df <- read_csv("/ps1/sutterexperiment.csv")
df <- read_csv("ps1/sutterexperiment.csv")
df <- read_csv("R-hw/ps1/sutterexperiment.csv")
