library(tidyverse)
library(tidyverse)
library(cowplot)
library(lfe)
install.packages("lfe")
library(lfe)
rm(list = ls()) # Clear environment
rm(list = ls()) # Clear environment
library(tidyverse)
library(cowplot)
#install.packages("lfe")
library(lfe)
library(stargazer)
df <- read_csv("tables1to4.csv")
mean_rev <- mean(df$totrev)
df <- df %>% mutate(totrev_fe = totrev - mean_rev)
dailycorr <- read.csv("dailycorrs.csv")
p1 <- ggplot(dailycorr, aes(x=logv, y=logf)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE, fullrange=FALSE, level=0.95) +
labs(title = "Correlation Test of Delivery Companies", x = "log of Veloblitz", y = "log of Flash") +
theme_classic()
# should we $e^*$ back to revenues; create a new table
rev_delivery <- exp(dailycorr)
p2 <- ggplot(rev_delivery, aes(x=logf, fill="#FF6666")) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
p2
View(dailycorr)
View(df)
View(rev_delivery)
View(dailycorr)
p2 <- ggplot(rev_delivery, aes(x1=logf, x2 = logv, fill="#FF6666")) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
p2
x <- data.frame(v1=rnorm(100),v2=rnorm(100,1,1),v3=rnorm(100,0,2))
library(ggplot2);library(reshape2)
data<- melt(x)
x <- data.frame(v1=rnorm(100),v2=rnorm(100,1,1),v3=rnorm(100,0,2))
ggplot(melt(x), aes(x = value, fill = variable)) + geom_density(alpha = 0.25)
View(x)
View(data)
data <- melt(rev_delivery)
View(data)
p2 <- ggplot(rev_delivery, aes(x = value, fill = variable)) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
p2
p2 <- ggplot(data, aes(x = value, fill = variable)) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
p2
p2 <- ggplot(data, aes(x = value, fill = variable)) +
geom_density(alpha=0.2) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
p2
p2 <- ggplot(data, aes(x = value, fill = variable)) +
geom_density(alpha=0.5) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
p2
p2 <- ggplot(data, aes(x = value, fill = variable)) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
p2
rm(list = ls()) # Clear environment
library(tidyverse)
library(cowplot)
#install.packages("lfe")
library(lfe)
library(stargazer)
dailycorr <- read.csv("dailycorrs.csv")
p1 <- ggplot(dailycorr, aes(x=logv, y=logf)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE, fullrange=FALSE, level=0.95) +
labs(title = "Correlation Test of Delivery Companies", x = "log of Veloblitz", y = "log of Flash") +
theme_classic()
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
p2 <- ggplot(rev_delivery, aes(x = value, fill = variable)) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
plot_grid(p1, p2, labels = c('14', '15'),
nrow = 1)
df <- read_csv("tables1to4.csv")
mean_rev <- mean(df$totrev)
df <- df %>% mutate(totrev_fe = totrev - mean_rev)
summarise(df$totrev_fe)
df <- read_csv("tables1to4.csv")
mean_rev <- mean(df$totrev)
df <- df %>% mutate(totrev_fe = totrev - mean_rev)
## Running Regression
# Linear trend
fit.lin <- tslm(marathon ~ trend)
library(ggplot2)
library(fpp2)
library(dplyr)
## Running Regression
# Linear trend
fit.lin <- tslm(marathon ~ trend)
fcasts.lin <- forecast(fit.lin, h=10)
# Exponential trend
fit.exp <- tslm(marathon ~ trend, lambda = 0)
fcasts.exp <- forecast(fit.exp, h=10)
# Piecewise linear trend
t.break1 <- 1940
t.break2 <- 1980
t <- time(marathon)
t1 <- ts(pmax(0, t-t.break1), start=1897)
t2 <- ts(pmax(0, t-t.break2), start=1897)
fit.pw <- tslm(marathon ~ t + t1 + t2)
t.new <- t[length(t)] + seq(10)
t1.new <- t1[length(t1)] + seq(10)
t2.new <- t2[length(t2)] + seq(10)
newdata <- cbind(t=t.new, t1=t1.new, t2=t2.new) %>%
as.data.frame
fcasts.pw <- forecast(fit.pw, newdata = newdata)
fcasts.pw
autoplot(fcasts.pw)
checkresiduals(fcasts.pw)
# Spline trend
library(splines)
t <- time(marathon)
fit.splines <- lm(marathon ~ ns(t, df=6))
summary(fit.splines)
# Spline Coefficients and f
fc <- splinef(marathon)
autoplot(fc)
# predit US Consumption
fit.consBest <- tslm(
Consumption ~ Income + Savings + Unemployment,
data = uschange)
h <- 4
newdata <- data.frame(
Income = c(1, 1, 1, 1),
Savings = c(0.5, 0.5, 0.5, 0.5),
Unemployment = c(0, 0, 0, 0))
fcast.up <- forecast(fit.consBest, newdata = newdata)
newdata <- data.frame(
Income = rep(-1, h),
Savings = rep(-0.5, h),
Unemployment = rep(0, h))
fcast.down <- forecast(fit.consBest, newdata = newdata)
autoplot(uschange[, 1]) +
ylab("% change in US consumption") +
autolayer(fcast.up, PI = TRUE, series = "increase") +
autolayer(fcast.down, PI = TRUE, series = "decrease") +
guides(colour = guide_legend(title = "Scenario"))
fcast.down
# Decomposition:
elecequip %>%
stl(s.window=7, t.window=11) %>%
autoplot()
elecequip %>%
stl(t.window=7, t.window=11) %>%
autoplot()
# Decomposition:
elecequip %>%
stl(s.window=7, t.window=11) %>%
autoplot()
# Decomposition:
elecequip %>%
stl(s.window=50, t.window=11) %>%
autoplot()
# Decomposition:
elecequip %>%
stl(s.window=7, t.window=11) %>%
autoplot()
df <- read_csv("tables1to4.csv")
df <- read_csv("tables1to4.csv")
mean_rev <- mean(df$totrev)
df <- df %>% mutate(totrev_fe = totrev - mean_rev)
rm(list = ls()) # Clear environment
library(tidyverse)
library(cowplot)
#install.packages("lfe")
library(lfe)
library(stargazer)
dailycorr <- read.csv("dailycorrs.csv")
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
df <- read_csv("tables1to4.csv")
df <- read_csv("tables1to4.csv")
mean_rev <- mean(df$totrev)
df <- df %>% mutate(totrev_fe = totrev - mean_rev)
View(df)
summarise(df)
summarise(df)
sum(df)
summarise_all(df)
summarise(dailycorr)
View(dailycorr)
summarise(df)
summary(df)
df %>% summarise()
df %>% summarise()
df %>% summary()
View(df)
unique(df$vebli)
unique(df$block)
unique(df$firstblock)
unique(df$maxhigh)
unique(df$group)
unique(df$experiment)
unique(df$odd)
View(df)
install.packages("stargazer")
install.packages("stargazer")
library(stargazer)
rm(list = ls()) # Clear environment
library(tidyverse)
library(cowplot)
#install.packages("lfe")
library(lfe)
library(stargazer)
stargazer(attitude)
e_t <- function(w_t) {
e <- ifelse(u >= 3/w_t, w_t, 2*w_t)
return(e)
}
curve(e_t, 0, 10)
dailycorr <- read.csv("dailycorrs.csv")
p1 <- ggplot(dailycorr, aes(x=logv, y=logf)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE, fullrange=FALSE, level=0.95) +
labs(title = "Correlation Test of Delivery Companies", x = "log of Veloblitz", y = "log of Flash") +
theme_classic()
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
p2 <- ggplot(rev_delivery, aes(x = value, fill = variable)) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
#install.packages("lfe")
library(lfe)
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
melt
library(lfe)
melt
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
library(reshape2)
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
p2 <- ggplot(rev_delivery, aes(x = value, fill = variable)) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
df <- read_csv("tables1to4.csv")
View(df)
install.packages("kableExtra")
dailycorr <- read.csv("dailycorrs.csv")
p1 <- ggplot(dailycorr, aes(x=logv, y=logf)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE, fullrange=FALSE, level=0.95) +
labs(title = "Correlation Test of Delivery Companies", x = "log of Veloblitz", y = "log of Flash") +
theme_classic()
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
plot_grid(p1, p2, labels = c('14', '15'),
nrow = 1)
e_t <- function(w) {
e <- ifelse(w < sqrt(1*3/2), 2*w, ifelse(w > sqrt(1*3), w, 3/w))
return(e)
}
curve(e_t, 0, 10)
e <- ifelse(w < sqrt(1*3/2), 2*w, ifelse(w > sqrt(1*3), w, 3/w))
e_t <- function(w) {
e <- ifelse(w < sqrt(1*3/2), 2*w, ifelse(w > sqrt(1*3), w, 3/w))
return(e)
}
curve(e_t, 0, 10)
rm(list = ls()) # Clear environment
library(tidyverse)
library(cowplot)
#install.packages("lfe")
library(lfe)
library(stargazer)
library(reshape2)
e_t <- function(w_t) {
e <- w_t/1
return(e)
}
curve(e_t, 0, 10)
e_t <- function(w) {
e <- ifelse(w < sqrt(1*3/2), 2*w, ifelse(w > sqrt(1*3), w, 3/w))
return(e)
}
curve(e_t, 0, 10)
dailycorr <- read.csv("dailycorrs.csv")
p1 <- ggplot(dailycorr, aes(x=logv, y=logf)) +
geom_point(size=2, shape=23) +
geom_smooth(method=lm, se=FALSE, fullrange=FALSE, level=0.95) +
labs(title = "Correlation Test of Delivery Companies", x = "log of Veloblitz", y = "log of Flash") +
theme_classic()
# should we $e^*$ back to revenues; create a new table
rev_delivery <- melt(exp(dailycorr))
p2 <- ggplot(rev_delivery, aes(x = value, fill = variable)) +
geom_density(alpha=0.4) +
labs(title = "Kernel density estimates",
x = "Revenues $", y = "Density") +
theme_classic()
plot_grid(p1, p2, labels = c('14', '15'),
nrow = 1)
df <- read_csv("tables1to4.csv")
mean_rev <- mean(df$totrev)
df <- df %>% mutate(totrev_fe = totrev - mean_rev)
# enter your code
df %>%
na.omit(odd)
group_by(block) %>%
#summarize(sum_trade = sum(trade),mean_trade = mean(trade), distance_to_mangola = unique(distance_to_mangola))%>%
ggplot(., aes(distance_to_mangola,mean_trade,size=sum_trade,label=campname)) +
geom_point(position = posiion_dodge(width = 0.5), size = 4, color="tomato") +
geom_errorbar(aes(x = block, ymin = , ymax), wid = .1, position = position_dodge(width = 0.5))
df <- read_csv("tables1to4.csv")
df <- read_csv("tables1to4.csv")
df <- df %>%
group_by(fahrer) %>%
mutate(totrev_fe = totrev - mean(totrev))
View(df)
e <- ifelse(w < sqrt(1*3/2), 2/w, ifelse(w > sqrt(1*3), w, 3/w))
e_t <- function(w) {
e <- ifelse(w < sqrt(1*3/2), 2/w, ifelse(w > sqrt(1*3), w, 3/w))
return(e)
}
curve(e_t, 0, 10)
# Alternatively,
dailycorr %>%
gather() %>%
ggplot(., aes(value, fill = key)) +
geom_density(alpha = 0.5) +
labs(title = "Kernel density estimates",
x = "Density", y = "Density") +
theme_classic()
